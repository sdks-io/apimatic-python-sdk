# -*- coding: utf-8 -*-

"""
apimaticapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimaticapi.api_helper import APIHelper
from apimaticapi.configuration import Server
from apimaticapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from apimaticapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimaticapi.models.api_validation_summary import ApiValidationSummary
from apimaticapi.models.docs_validation_summary import DocsValidationSummary
from apimaticapi.exceptions.api_exception import APIException


class APIValidationImportedApisController(BaseController):

    """A Controller to access Endpoints in the apimaticapi API."""
    def __init__(self, config):
        super(APIValidationImportedApisController, self).__init__(config)

    def validate_api(self,
                     api_entity_id):
        """Does a GET request to /api-entities/{api_entity_id}/api-validation-summary.

        Validate an API using the [APIMatic
        Validator](https://docs.apimatic.io/generate-sdks/overview-sdks#step-2-
        api-validation).

        Args:
            api_entity_id (str): The ID of the API Entity to perform
                validation for.

        Returns:
            ApiValidationSummary: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api-entities/{api_entity_id}/api-validation-summary')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('api_entity_id')
                            .value(api_entity_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('Authorization'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiValidationSummary.from_dictionary)
            .local_error('400', 'Bad Request', APIException)
            .local_error('403', 'Forbidden', APIException)
            .local_error('404', 'API not found', APIException)
            .local_error('500', 'Internal Server Error', APIException)
        ).execute()

    def validate_api_for_docs(self,
                              api_entity_id):
        """Does a GET request to /api-entities/{api_entity_id}/docs-validation-summary.

        Validate an API for documentation generation. This process validates
        the API for missing examples or missing descriptions.

        Args:
            api_entity_id (str): The ID of the API Entity to perform
                validation for.

        Returns:
            DocsValidationSummary: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api-entities/{api_entity_id}/docs-validation-summary')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('api_entity_id')
                            .value(api_entity_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('Authorization'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DocsValidationSummary.from_dictionary)
            .local_error('400', 'Bad Request', APIException)
            .local_error('403', 'Forbidden', APIException)
            .local_error('404', 'API not found', APIException)
            .local_error('500', 'Internal Server Error', APIException)
        ).execute()
