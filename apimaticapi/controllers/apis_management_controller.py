# -*- coding: utf-8 -*-

"""
apimaticapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimaticapi.api_helper import APIHelper
from apimaticapi.configuration import Server
from apimaticapi.utilities.file_wrapper import FileWrapper
from apimaticapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from apimaticapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.configurations.endpoint_configuration import EndpointConfiguration
from apimaticapi.models.api_entity import ApiEntity
from apimaticapi.exceptions.api_exception import APIException


class ApisManagementController(BaseController):

    """A Controller to access Endpoints in the apimaticapi API."""
    def __init__(self, config):
        super(ApisManagementController, self).__init__(config)

    def import_api_via_file(self,
                            file):
        """Does a POST request to /api-entities/import-via-file.

        Import an API into the APIMatic Dashboard by uploading the API
        specification file.
        You can also specify [API
        Metadata](https://docs.apimatic.io/manage-apis/apimatic-metadata)
        while importing the API using this endpoint. When specifying Metadata,
        the uploaded file will be a zip file containing the API specification
        file and the `APIMATIC-META` json file.

        Args:
            file (typing.BinaryIO): The API specification file.<br>The type of
                the specification file should be any of the [supported
                formats](https://docs.apimatic.io/api-transformer/overview-tran
                sformer#supported-input-formats).

        Returns:
            ApiEntity: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api-entities/import-via-file')
            .http_method(HttpMethodEnum.POST)
            .multipart_param(Parameter()
                             .key('file')
                             .value(file)
                             .default_content_type('application/octet-stream'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('Authorization'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiEntity.from_dictionary)
            .local_error('400', 'Bad Request', APIException)
            .local_error('412', 'Precondition Failed', APIException)
            .local_error('422', 'Unprocessable Entity', APIException)
            .local_error('500', 'Internal Server Error', APIException)
        ).execute()

    def import_api_via_url(self,
                           body):
        """Does a POST request to /api-entities/import-via-url.

        Import an API into the APIMatic Dashboard by providing the URL of the
        API specification file.
        You can also specify [API
        Metadata](https://docs.apimatic.io/manage-apis/apimatic-metadata)
        while importing the API using this endpoint. When specifying Metadata,
        the URL provided will be that of a zip file containing the API
        specification file and the `APIMATIC-META` json file.

        Args:
            body (ImportApiViaUrlRequest): Request Body

        Returns:
            ApiEntity: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api-entities/import-via-url')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.apimatic.apiEntityUrlImportDto.v1+json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('Authorization'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiEntity.from_dictionary)
            .local_error('400', 'Bad Request', APIException)
            .local_error('412', 'Precondition Failed', APIException)
            .local_error('422', 'Unprocessable Entity', APIException)
            .local_error('500', 'Internal Server Error', APIException)
        ).execute()

    def import_new_api_version_via_file(self,
                                        api_group_id,
                                        version_override,
                                        file):
        """Does a POST request to /api-groups/{api_group_id}/api-entities/import-via-file.

        Import a new version for an API, against an existing API Group, by
        uploading the API specification file.
        You can also specify [API
        Metadata](https://docs.apimatic.io/manage-apis/apimatic-metadata)
        while importing the API version using this endpoint. When specifying
        Metadata, the uploaded file will be a zip file containing the API
        specification file and the `APIMATIC-META` json file.

        Args:
            api_group_id (str): The ID of the API Group for which to import a
                new API version.
            version_override (str): The version number with which the new API
                version will be imported. This version number will override
                the version specified in the API specification
                file.<br>APIMatic recommends versioning the API with the
                [versioning
                scheme](https://docs.apimatic.io/define-apis/basic-settings/#ve
                rsion) documented in the docs.
            file (typing.BinaryIO): The API specification file.<br>The type of
                the specification file should be any of the [supported
                formats](https://docs.apimatic.io/api-transformer/overview-tran
                sformer#supported-input-formats).

        Returns:
            ApiEntity: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api-groups/{api_group_id}/api-entities/import-via-file')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('api_group_id')
                            .value(api_group_id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('version_override')
                        .value(version_override))
            .multipart_param(Parameter()
                             .key('file')
                             .value(file)
                             .default_content_type('application/octet-stream'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('Authorization'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiEntity.from_dictionary)
        ).execute()

    def import_new_api_version_via_url(self,
                                       api_group_id,
                                       body):
        """Does a POST request to /api-groups/{api_group_id}/api-entities/import-via-url.

        Import a new version for an API, against an existing API Group, by
        providing the URL of the API specification file.
        You can also specify [API
        Metadata](https://docs.apimatic.io/manage-apis/apimatic-metadata)
        while importing the API version using this endpoint. When specifying
        Metadata, the URL provided will be that of a zip file containing the
        API specification file and the `APIMATIC-META` json file.

        Args:
            api_group_id (str): The ID of the API Group for which to import a
                new API version.
            body (ImportApiVersionViaUrlRequest): Request Body

        Returns:
            ApiEntity: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api-groups/{api_group_id}/api-entities/import-via-url')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('api_group_id')
                            .value(api_group_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.apimatic.apiGroupApiEntityUrlImportDto.v1+json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('Authorization'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiEntity.from_dictionary)
        ).execute()

    def inplace_api_import_via_file(self,
                                    api_entity_id,
                                    file):
        """Does a PUT request to /api-entities/{api_entity_id}/import-via-file.

        Replace an API version of an API Group, by uploading the API
        specification file that will replace the current version.
        You can also specify [API
        Metadata](https://docs.apimatic.io/manage-apis/apimatic-metadata)
        while importing the API version using this endpoint. When specifying
        Metadata, the uploaded file will be a zip file containing the API
        specification file and the `APIMATIC-META` json file.

        Args:
            api_entity_id (str): The ID of the API Entity to replace.
            file (typing.BinaryIO): The API specification file.<br>The type of
                the specification file should be any of the [supported
                formats](https://docs.apimatic.io/api-transformer/overview-tran
                sformer#supported-input-formats).

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api-entities/{api_entity_id}/import-via-file')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('api_entity_id')
                            .value(api_entity_id)
                            .should_encode(True))
            .multipart_param(Parameter()
                             .key('file')
                             .value(file)
                             .default_content_type('application/octet-stream'))
            .auth(Single('Authorization'))
        ).execute()

    def inplace_api_import_via_url(self,
                                   api_entity_id,
                                   body):
        """Does a PUT request to /api-entities/{api_entity_id}/import-via-url.

        Replace an API version of an API Group, by providing the URL of the
        API specification file that will replace the current version.
        You can also specify [API
        Metadata](https://docs.apimatic.io/manage-apis/apimatic-metadata)
        while importing the API version using this endpoint. When specifying
        Metadata, the URL provided will be that of a zip file containing the
        API specification file and the `APIMATIC-META` json file.

        Args:
            api_entity_id (str): The ID of the API Entity to replace.
            body (InplaceImportApiViaUrlRequest): Request Body

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api-entities/{api_entity_id}/import-via-url')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('api_entity_id')
                            .value(api_entity_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.apimatic.apiEntityUrlImportDto.v1+json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('Authorization'))
        ).execute()

    def fetch_api_entity(self,
                         api_entity_id):
        """Does a GET request to /api-entities/{api_entity_id}.

        Fetch an API Entity.

        Args:
            api_entity_id (str): The ID of the API Entity to fetch.

        Returns:
            ApiEntity: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api-entities/{api_entity_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('api_entity_id')
                            .value(api_entity_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('Authorization'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiEntity.from_dictionary)
        ).execute()

    def download_api_specification(self,
                                   api_entity_id,
                                   format):
        """Does a GET request to /api-entities/{api_entity_id}/api-description.

        Download the API Specification file for a an API Version in any of the
        API Specification formats supported by APIMatic.

        Args:
            api_entity_id (str): The ID of the API Entity to download.
            format (ExportFormats): The format in which to download the
                API.<br>The format can be any of the [supported
                formats](https://docs.apimatic.io/api-transformer/overview-tran
                sformer#supported-input-formats).

        Returns:
            binary: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api-entities/{api_entity_id}/api-description')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('api_entity_id')
                            .value(api_entity_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('format')
                         .value(format))
            .auth(Single('Authorization'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).endpoint_configuration(
            EndpointConfiguration()
            .has_binary_response(True)
        ).execute()
