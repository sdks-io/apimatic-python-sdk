# -*- coding: utf-8 -*-

"""
apimaticapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from apimaticapi.models.authentication import Authentication
from apimaticapi.models.code_gen_settings import CodeGenSettings
from apimaticapi.models.endpoints_group import EndpointsGroup
from apimaticapi.models.meta_data import MetaData
from apimaticapi.models.server_configuration import ServerConfiguration
from apimaticapi.models.test_gen_settings import TestGenSettings


class ApiEntity(object):

    """Implementation of the 'ApiEntity' model.

    The API Entity Structure encapsulates all the details of an API Entity. An
    API entity is a unique API Version.

    Attributes:
        id (str): Unique API Entity identifier
        encrypted_id (str): Enrcypted API Entity Id
        api_key (str): API Integration Key. Obtain from API Card on
            Dashboard.
        api_group_id (str): Unique API Group Identifier
        image_uri (str): Cover Image
        creation_date (str): Entity creation date
        public (bool): API Status (Deprecated)
        name (str): API Entity  Name
        description (str): Description of the API
        version (str): Entity Version Number
        additional_headers (List[str]): Header Content
        authentication (Authentication): This Structure encapsulates all
            details of API authentication.
        code_gen_settings (CodeGenSettings): APIMaticâ€™s code generation engine
            has various code generation configurations to customise the
            behaviour and outlook across the generated SDKS. This structure
            encapsulates all settings for CodeGeneration.
        test_gen_settings (TestGenSettings): This structure helps specify
            additional test configurations which affects how test cases are
            generated.
        errors (List[str]): API Errors
        server_configuration (ServerConfiguration): Server configurations can
            be used to create multiple environments, multiple servers that can
            be used with specific endpoints and server URLs with template
            paramters.
        endpoints_group (List[EndpointsGroup]): API Endpoint Groups
        meta_data (MetaData): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "encrypted_id": 'encryptedId',
        "api_key": 'apiKey',
        "api_group_id": 'apiGroupId',
        "image_uri": 'imageUri',
        "creation_date": 'creationDate',
        "public": 'public',
        "name": 'name',
        "description": 'description',
        "version": 'version',
        "additional_headers": 'additionalHeaders',
        "authentication": 'authentication',
        "code_gen_settings": 'codeGenSettings',
        "test_gen_settings": 'testGenSettings',
        "errors": 'errors',
        "server_configuration": 'serverConfiguration',
        "endpoints_group": 'endpointsGroup',
        "meta_data": 'metaData'
    }

    def __init__(self,
                 id=None,
                 encrypted_id=None,
                 api_key=None,
                 api_group_id=None,
                 image_uri=None,
                 creation_date=None,
                 public=None,
                 name=None,
                 description=None,
                 version=None,
                 additional_headers=None,
                 authentication=None,
                 code_gen_settings=None,
                 test_gen_settings=None,
                 errors=None,
                 server_configuration=None,
                 endpoints_group=None,
                 meta_data=None):
        """Constructor for the ApiEntity class"""

        # Initialize members of the class
        self.id = id 
        self.encrypted_id = encrypted_id 
        self.api_key = api_key 
        self.api_group_id = api_group_id 
        self.image_uri = image_uri 
        self.creation_date = creation_date 
        self.public = public 
        self.name = name 
        self.description = description 
        self.version = version 
        self.additional_headers = additional_headers 
        self.authentication = authentication 
        self.code_gen_settings = code_gen_settings 
        self.test_gen_settings = test_gen_settings 
        self.errors = errors 
        self.server_configuration = server_configuration 
        self.endpoints_group = endpoints_group 
        self.meta_data = meta_data 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        encrypted_id = dictionary.get("encryptedId") if dictionary.get("encryptedId") else None
        api_key = dictionary.get("apiKey") if dictionary.get("apiKey") else None
        api_group_id = dictionary.get("apiGroupId") if dictionary.get("apiGroupId") else None
        image_uri = dictionary.get("imageUri") if dictionary.get("imageUri") else None
        creation_date = dictionary.get("creationDate") if dictionary.get("creationDate") else None
        public = dictionary.get("public") if "public" in dictionary.keys() else None
        name = dictionary.get("name") if dictionary.get("name") else None
        description = dictionary.get("description") if dictionary.get("description") else None
        version = dictionary.get("version") if dictionary.get("version") else None
        additional_headers = dictionary.get("additionalHeaders") if dictionary.get("additionalHeaders") else None
        authentication = Authentication.from_dictionary(dictionary.get('authentication')) if dictionary.get('authentication') else None
        code_gen_settings = CodeGenSettings.from_dictionary(dictionary.get('codeGenSettings')) if dictionary.get('codeGenSettings') else None
        test_gen_settings = TestGenSettings.from_dictionary(dictionary.get('testGenSettings')) if dictionary.get('testGenSettings') else None
        errors = dictionary.get("errors") if dictionary.get("errors") else None
        server_configuration = ServerConfiguration.from_dictionary(dictionary.get('serverConfiguration')) if dictionary.get('serverConfiguration') else None
        endpoints_group = None
        if dictionary.get('endpointsGroup') is not None:
            endpoints_group = [EndpointsGroup.from_dictionary(x) for x in dictionary.get('endpointsGroup')]
        meta_data = MetaData.from_dictionary(dictionary.get('metaData')) if dictionary.get('metaData') else None
        # Return an object of this model
        return cls(id,
                   encrypted_id,
                   api_key,
                   api_group_id,
                   image_uri,
                   creation_date,
                   public,
                   name,
                   description,
                   version,
                   additional_headers,
                   authentication,
                   code_gen_settings,
                   test_gen_settings,
                   errors,
                   server_configuration,
                   endpoints_group,
                   meta_data)
