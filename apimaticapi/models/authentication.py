# -*- coding: utf-8 -*-

"""
apimaticapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from apimaticapi.models.auth_scope import AuthScope


class Authentication(object):

    """Implementation of the 'Authentication' model.

    This Structure encapsulates all details of API authentication.

    Attributes:
        id (str): Auth Id
        auth_type (str): Auth Type
        scopes (List[AuthScope]): Scope
        parameters (List[str]): Auth Params
        auth_scopes (List[str]): Auth Scopes
        auth_grant_types (List[str]): Auth Grant Types
        param_formats (object): Paramater Formats

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "auth_type": 'authType',
        "scopes": 'scopes',
        "parameters": 'parameters',
        "auth_scopes": 'authScopes',
        "auth_grant_types": 'authGrantTypes',
        "param_formats": 'paramFormats'
    }

    def __init__(self,
                 id=None,
                 auth_type=None,
                 scopes=None,
                 parameters=None,
                 auth_scopes=None,
                 auth_grant_types=None,
                 param_formats=None):
        """Constructor for the Authentication class"""

        # Initialize members of the class
        self.id = id 
        self.auth_type = auth_type 
        self.scopes = scopes 
        self.parameters = parameters 
        self.auth_scopes = auth_scopes 
        self.auth_grant_types = auth_grant_types 
        self.param_formats = param_formats 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        auth_type = dictionary.get("authType") if dictionary.get("authType") else None
        scopes = None
        if dictionary.get('scopes') is not None:
            scopes = [AuthScope.from_dictionary(x) for x in dictionary.get('scopes')]
        parameters = dictionary.get("parameters") if dictionary.get("parameters") else None
        auth_scopes = dictionary.get("authScopes") if dictionary.get("authScopes") else None
        auth_grant_types = dictionary.get("authGrantTypes") if dictionary.get("authGrantTypes") else None
        param_formats = dictionary.get("paramFormats") if dictionary.get("paramFormats") else None
        # Return an object of this model
        return cls(id,
                   auth_type,
                   scopes,
                   parameters,
                   auth_scopes,
                   auth_grant_types,
                   param_formats)
