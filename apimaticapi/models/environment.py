# -*- coding: utf-8 -*-

"""
apimaticapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from apimaticapi.models.server import Server


class Environment(object):

    """Implementation of the 'Environment' model.

    An environment consists of a set of servers with base URL values. The
    environment can be changed programatically allowing rapid switching
    between different environments. For example the user can specify a
    Production and Testing Environment and switch between them in the
    generated SDK.

    Attributes:
        id (str): Unique Environment Identifier
        name (str): Environment Name
        servers (List[Server]): The user can specify multiple servers within
            an environment. A server comprises of a name and a url.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "name": 'name',
        "servers": 'servers'
    }

    def __init__(self,
                 id=None,
                 name=None,
                 servers=None):
        """Constructor for the Environment class"""

        # Initialize members of the class
        self.id = id 
        self.name = name 
        self.servers = servers 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        servers = None
        if dictionary.get('servers') is not None:
            servers = [Server.from_dictionary(x) for x in dictionary.get('servers')]
        # Return an object of this model
        return cls(id,
                   name,
                   servers)
