# -*- coding: utf-8 -*-

"""
apimaticapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from apimaticapi.models.environment import Environment
from apimaticapi.models.parameter import Parameter


class ServerConfiguration(object):

    """Implementation of the 'ServerConfiguration' model.

    Server configurations can be used to create multiple environments,
    multiple servers that can be used with specific endpoints and server URLs
    with template paramters.

    Attributes:
        id (str): Server Config Identifier
        default_environment (str): Default Environment
        default_server (str): Default Server
        environments (List[Environment]): Environment Identifier and Name
        parameters (List[Parameter]): Parameter Attributes

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "default_environment": 'defaultEnvironment',
        "default_server": 'defaultServer',
        "environments": 'environments',
        "parameters": 'parameters'
    }

    def __init__(self,
                 id=None,
                 default_environment=None,
                 default_server=None,
                 environments=None,
                 parameters=None):
        """Constructor for the ServerConfiguration class"""

        # Initialize members of the class
        self.id = id 
        self.default_environment = default_environment 
        self.default_server = default_server 
        self.environments = environments 
        self.parameters = parameters 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        default_environment = dictionary.get("defaultEnvironment") if dictionary.get("defaultEnvironment") else None
        default_server = dictionary.get("defaultServer") if dictionary.get("defaultServer") else None
        environments = None
        if dictionary.get('environments') is not None:
            environments = [Environment.from_dictionary(x) for x in dictionary.get('environments')]
        parameters = None
        if dictionary.get('parameters') is not None:
            parameters = [Parameter.from_dictionary(x) for x in dictionary.get('parameters')]
        # Return an object of this model
        return cls(id,
                   default_environment,
                   default_server,
                   environments,
                   parameters)
